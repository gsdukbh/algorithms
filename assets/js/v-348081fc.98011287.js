(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4488],{7495:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-348081fc",path:"/leetcode/SortedArrayToBinarySearchTree.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"将有序数组转换为二叉搜索树",slug:"将有序数组转换为二叉搜索树",children:[]}],filePathRelative:"leetcode/SortedArrayToBinarySearchTree.md",git:{updatedTime:1622450691e3,contributors:[]}}},8466:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h2 id="将有序数组转换为二叉搜索树"><a class="header-anchor" href="#将有序数组转换为二叉搜索树">#</a> 将有序数组转换为二叉搜索树</h2><h5 id="思路"><a class="header-anchor" href="#思路">#</a> 思路：</h5><p>二叉搜索树的中序遍历是升序的，可以利用在这个特点。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">TreeNode</span> <span class="token function">sortedArrayToBinarySearchTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token keyword">return</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">TreeNode</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n        <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">bfs</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">bfs</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> node<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',4),t={render:function(n,s){return p}}}}]);