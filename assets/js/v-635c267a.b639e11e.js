(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9591],{6856:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-635c267a",path:"/leetcode/IsSubsequence.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"392. 判断子序列",slug:"_392-判断子序列",children:[]}],filePathRelative:"leetcode/IsSubsequence.md",git:{updatedTime:1622450691e3,contributors:[]}}},8791:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h2 id="_392-判断子序列"><a class="header-anchor" href="#_392-判断子序列">#</a> 392. 判断子序列</h2><p>思路1.暴力遍历。</p><p><a href="../../../leetcode/app/src/main/java/top/werls/leetcode/IsSubsequence.java">代码</a></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSubsequence</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> sl <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tl <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> sl <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> tl<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                i<span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            j<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> i <span class="token operator">==</span> sl<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>思路 2. dp</p><p>记录t 字符串中字符第一次出现的位置，然后</p>',6),t={render:function(n,s){return p}}}}]);